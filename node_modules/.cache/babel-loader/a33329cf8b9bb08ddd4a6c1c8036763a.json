{"ast":null,"code":"var _jsxFileName = \"G:\\\\CryptoRDEX\\\\src\\\\components\\\\Contract\\\\Contract.jsx\",\n    _s = $RefreshSig$();\n\nimport { Card, Form, notification } from \"antd\";\nimport { useMemo, useState } from \"react\";\nimport contractInfo from \"contracts/contractInfo.json\";\nimport Address from \"components/Address/Address\";\nimport { useMoralis, useMoralisQuery } from \"react-moralis\";\nimport { getEllipsisTxt } from \"helpers/formatters\";\nimport ContractMethods from \"./ContractMethods\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Contract() {\n  _s();\n\n  const {\n    Moralis\n  } = useMoralis();\n  const [responses, setResponses] = useState({});\n  const {\n    contractName,\n    networks,\n    abi\n  } = contractInfo;\n  const contractAddress = useMemo(() => networks[1337].address, [networks]);\n  /**Live query */\n\n  const {\n    data\n  } = useMoralisQuery(\"Events\", query => query, [], {\n    live: true\n  });\n  const displayedContractFunctions = useMemo(() => {\n    if (!abi) return [];\n    return abi.filter(method => method[\"type\"] === \"function\");\n  }, [abi]);\n\n  const openNotification = _ref => {\n    let {\n      message,\n      description\n    } = _ref;\n    notification.open({\n      placement: \"bottomRight\",\n      message,\n      description,\n      onClick: () => {\n        console.log(\"Notification Clicked!\");\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: \"auto\",\n      display: \"flex\",\n      gap: \"20px\",\n      marginTop: \"25\",\n      width: \"70vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      title: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\"\n        },\n        children: [\"Your contract: \", contractName, /*#__PURE__*/_jsxDEV(Address, {\n          avatar: \"left\",\n          copyable: true,\n          address: contractAddress,\n          size: 8\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this),\n      size: \"large\",\n      style: {\n        width: \"60%\",\n        boxShadow: \"0 0.5rem 1.2rem rgb(189 197 209 / 20%)\",\n        border: \"1px solid #e7eaf3\",\n        borderRadius: \"0.5rem\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Form.Provider, {\n        onFormFinish: async (name, _ref2) => {\n          let {\n            forms\n          } = _ref2;\n          const params = forms[name].getFieldsValue();\n          let isView = false;\n\n          for (let method of abi) {\n            if (method.name !== name) continue;\n            if (method.stateMutability === \"view\") isView = true;\n          }\n\n          const options = {\n            contractAddress,\n            functionName: name,\n            abi,\n            params\n          };\n\n          if (!isView) {\n            const tx = await Moralis.executeFunction({\n              awaitReceipt: false,\n              ...options\n            });\n            tx.on(\"transactionHash\", hash => {\n              setResponses({ ...responses,\n                [name]: {\n                  result: null,\n                  isLoading: true\n                }\n              });\n              openNotification({\n                message: \"ðŸ”Š New Transaction\",\n                description: `${hash}`\n              });\n              console.log(\"ðŸ”Š New Transaction\", hash);\n            }).on(\"receipt\", receipt => {\n              setResponses({ ...responses,\n                [name]: {\n                  result: null,\n                  isLoading: false\n                }\n              });\n              openNotification({\n                message: \"ðŸ“ƒ New Receipt\",\n                description: `${receipt.transactionHash}`\n              });\n              console.log(\"ðŸ”Š New Receipt: \", receipt);\n            }).on(\"error\", error => {\n              console.error(error);\n            });\n          } else {\n            console.log(\"options\", options);\n            Moralis.executeFunction(options).then(response => setResponses({ ...responses,\n              [name]: {\n                result: response,\n                isLoading: false\n              }\n            }));\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(ContractMethods, {\n          displayedContractFunctions: displayedContractFunctions,\n          responses: responses\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Contract Events\",\n      size: \"large\",\n      style: {\n        width: \"40%\",\n        boxShadow: \"0 0.5rem 1.2rem rgb(189 197 209 / 20%)\",\n        border: \"1px solid #e7eaf3\",\n        borderRadius: \"0.5rem\"\n      },\n      children: data.map((event, key) => /*#__PURE__*/_jsxDEV(Card, {\n        title: \"Transfer event\",\n        size: \"small\",\n        style: {\n          marginBottom: \"20px\"\n        },\n        children: getEllipsisTxt(event.attributes.transaction_hash, 14)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Contract, \"lGX9AnyfcVrdD8QqjF0hp6o1FG4=\", false, function () {\n  return [useMoralis, useMoralisQuery];\n});\n\n_c = Contract;\n\nvar _c;\n\n$RefreshReg$(_c, \"Contract\");","map":{"version":3,"sources":["G:/CryptoRDEX/src/components/Contract/Contract.jsx"],"names":["Card","Form","notification","useMemo","useState","contractInfo","Address","useMoralis","useMoralisQuery","getEllipsisTxt","ContractMethods","Contract","Moralis","responses","setResponses","contractName","networks","abi","contractAddress","address","data","query","live","displayedContractFunctions","filter","method","openNotification","message","description","open","placement","onClick","console","log","margin","display","gap","marginTop","width","justifyContent","alignItems","boxShadow","border","borderRadius","name","forms","params","getFieldsValue","isView","stateMutability","options","functionName","tx","executeFunction","awaitReceipt","on","hash","result","isLoading","receipt","transactionHash","error","then","response","map","event","key","marginBottom","attributes","transaction_hash"],"mappings":"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","sourcesContent":["import { Card, Form, notification } from \"antd\";\r\nimport { useMemo, useState } from \"react\";\r\nimport contractInfo from \"contracts/contractInfo.json\";\r\nimport Address from \"components/Address/Address\";\r\nimport { useMoralis, useMoralisQuery } from \"react-moralis\";\r\nimport { getEllipsisTxt } from \"helpers/formatters\";\r\nimport ContractMethods from \"./ContractMethods\";\r\n\r\nexport default function Contract() {\r\n  const { Moralis } = useMoralis();\r\n  const [responses, setResponses] = useState({});\r\n  const { contractName, networks, abi } = contractInfo;\r\n\r\n  const contractAddress = useMemo(() => networks[1337].address, [networks]);\r\n\r\n  /**Live query */\r\n  const { data } = useMoralisQuery(\"Events\", (query) => query, [], {\r\n    live: true,\r\n  });\r\n\r\n  const displayedContractFunctions = useMemo(() => {\r\n    if (!abi) return [];\r\n    return abi.filter((method) => method[\"type\"] === \"function\");\r\n  }, [abi]);\r\n\r\n  const openNotification = ({ message, description }) => {\r\n    notification.open({\r\n      placement: \"bottomRight\",\r\n      message,\r\n      description,\r\n      onClick: () => {\r\n        console.log(\"Notification Clicked!\");\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div style={{ margin: \"auto\", display: \"flex\", gap: \"20px\", marginTop: \"25\", width: \"70vw\" }}>\r\n      <Card\r\n        title={\r\n          <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n            Your contract: {contractName}\r\n            <Address avatar=\"left\" copyable address={contractAddress} size={8} />\r\n          </div>\r\n        }\r\n        size=\"large\"\r\n        style={{\r\n          width: \"60%\",\r\n          boxShadow: \"0 0.5rem 1.2rem rgb(189 197 209 / 20%)\",\r\n          border: \"1px solid #e7eaf3\",\r\n          borderRadius: \"0.5rem\",\r\n        }}\r\n      >\r\n        <Form.Provider\r\n          onFormFinish={async (name, { forms }) => {\r\n            const params = forms[name].getFieldsValue();\r\n\r\n            let isView = false;\r\n\r\n            for (let method of abi) {\r\n              if (method.name !== name) continue;\r\n              if (method.stateMutability === \"view\") isView = true;\r\n            }\r\n\r\n            const options = {\r\n              contractAddress,\r\n              functionName: name,\r\n              abi,\r\n              params,\r\n            };\r\n\r\n            if (!isView) {\r\n              const tx = await Moralis.executeFunction({ awaitReceipt: false, ...options });\r\n              tx.on(\"transactionHash\", (hash) => {\r\n                setResponses({ ...responses, [name]: { result: null, isLoading: true } });\r\n                openNotification({\r\n                  message: \"ðŸ”Š New Transaction\",\r\n                  description: `${hash}`,\r\n                });\r\n                console.log(\"ðŸ”Š New Transaction\", hash);\r\n              })\r\n                .on(\"receipt\", (receipt) => {\r\n                  setResponses({ ...responses, [name]: { result: null, isLoading: false } });\r\n                  openNotification({\r\n                    message: \"ðŸ“ƒ New Receipt\",\r\n                    description: `${receipt.transactionHash}`,\r\n                  });\r\n                  console.log(\"ðŸ”Š New Receipt: \", receipt);\r\n                })\r\n                .on(\"error\", (error) => {\r\n                  console.error(error);\r\n                });\r\n            } else {\r\n              console.log(\"options\", options);\r\n              Moralis.executeFunction(options).then((response) =>\r\n                setResponses({ ...responses, [name]: { result: response, isLoading: false } })\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          <ContractMethods displayedContractFunctions={displayedContractFunctions} responses={responses} />\r\n        </Form.Provider>\r\n      </Card>\r\n      <Card\r\n        title={\"Contract Events\"}\r\n        size=\"large\"\r\n        style={{\r\n          width: \"40%\",\r\n          boxShadow: \"0 0.5rem 1.2rem rgb(189 197 209 / 20%)\",\r\n          border: \"1px solid #e7eaf3\",\r\n          borderRadius: \"0.5rem\",\r\n        }}\r\n      >\r\n        {data.map((event, key) => (\r\n          <Card title={\"Transfer event\"} size=\"small\" style={{ marginBottom: \"20px\" }}>\r\n            {getEllipsisTxt(event.attributes.transaction_hash, 14)}\r\n          </Card>\r\n        ))}\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}