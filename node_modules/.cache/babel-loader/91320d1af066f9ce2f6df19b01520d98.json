{"ast":null,"code":"var _jsxFileName = \"G:\\\\CryptoRDEX\\\\src\\\\components\\\\InchDex\\\\InchDex.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useMemo } from \"react\";\nimport { useMoralis } from \"react-moralis\";\nimport InchModal from \"./components/InchModal\";\nimport useInchDex from \"hooks/useInchDex\";\nimport { Button, Card, Image, Input, InputNumber, Modal } from \"antd\";\nimport Text from \"antd/lib/typography/Text\";\nimport { ArrowDownOutlined } from \"@ant-design/icons\";\nimport { useTokenPrice } from \"react-moralis\";\nimport { tokenValue } from \"helpers/formatters\";\nimport { getWrappedNative } from \"helpers/networks\"; // import { useOneInchQuote } from \"react-moralis\";\n\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  card: {\n    width: \"430px\",\n    boxShadow: \"0 0.5rem 1.2rem rgb(189 197 209 / 20%)\",\n    border: \"1px solid #e7eaf3\",\n    borderRadius: \"1rem\",\n    fontSize: \"16px\",\n    fontWeight: \"500\"\n  },\n  input: {\n    padding: \"0\",\n    fontWeight: \"500\",\n    fontSize: \"23px\",\n    display: \"block\",\n    width: \"100%\"\n  },\n  priceSwap: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    fontSize: \"15px\",\n    color: \"#434343\",\n    marginTop: \"8px\",\n    padding: \"0 10px\"\n  }\n};\nconst nativeAddress = \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";\nconst chainIds = {\n  \"0x1\": \"eth\",\n  \"0x38\": \"bsc\",\n  \"0x89\": \"polygon\",\n  \"0x61\": \"bsc testnet\"\n};\n\nconst getChainIdByName = chainName => {\n  for (let chainId in chainIds) {\n    if (chainIds[chainId] === chainName) return chainId;\n  }\n};\n\nconst IsNative = address => address === \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";\n\n_c = IsNative;\n\nfunction InchDex(_ref) {\n  _s();\n\n  var _quote$toToken2;\n\n  let {\n    chain\n  } = _ref;\n  const {\n    trySwap,\n    tokenList,\n    getQuote\n  } = useInchDex(chain);\n  const {\n    Moralis,\n    isInitialized,\n    chainId\n  } = useMoralis();\n  const [isFromModalActive, setFromModalActive] = useState(false);\n  const [isToModalActive, setToModalActive] = useState(false);\n  const [fromToken, setFromToken] = useState();\n  const [toToken, setToToken] = useState();\n  const [fromAmount, setFromAmount] = useState();\n  const [quote, setQuote] = useState();\n  const [currentTrade, setCurrentTrade] = useState();\n  const {\n    fetchTokenPrice\n  } = useTokenPrice();\n  const [tokenPricesUSD, setTokenPricesUSD] = useState({});\n  const fromTokenPriceUsd = useMemo(() => (tokenPricesUSD === null || tokenPricesUSD === void 0 ? void 0 : tokenPricesUSD[fromToken === null || fromToken === void 0 ? void 0 : fromToken[\"address\"]]) ? tokenPricesUSD[fromToken === null || fromToken === void 0 ? void 0 : fromToken[\"address\"]] : null, [tokenPricesUSD, fromToken]);\n  const toTokenPriceUsd = useMemo(() => (tokenPricesUSD === null || tokenPricesUSD === void 0 ? void 0 : tokenPricesUSD[toToken === null || toToken === void 0 ? void 0 : toToken[\"address\"]]) ? tokenPricesUSD[toToken === null || toToken === void 0 ? void 0 : toToken[\"address\"]] : null, [tokenPricesUSD, toToken]);\n  const fromTokenAmountUsd = useMemo(() => {\n    if (!fromTokenPriceUsd || !fromAmount) return null;\n    return `~$ ${(fromAmount * fromTokenPriceUsd).toFixed(4)}`;\n  }, [fromTokenPriceUsd, fromAmount]);\n  const toTokenAmountUsd = useMemo(() => {\n    var _quote$toToken;\n\n    if (!toTokenPriceUsd || !quote) return null;\n    return `~$ ${(Moralis.Units.FromWei(quote === null || quote === void 0 ? void 0 : quote.toTokenAmount, quote === null || quote === void 0 ? void 0 : (_quote$toToken = quote.toToken) === null || _quote$toToken === void 0 ? void 0 : _quote$toToken.decimals) * toTokenPriceUsd).toFixed(4)}`; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [toTokenPriceUsd, quote]); // tokenPrices\n\n  useEffect(() => {\n    if (!isInitialized || !fromToken || !chain) return null;\n    const validatedChain = chain ? getChainIdByName(chain) : chainId;\n    const tokenAddress = IsNative(fromToken[\"address\"]) ? getWrappedNative(validatedChain) : fromToken[\"address\"];\n    fetchTokenPrice({\n      params: {\n        chain: validatedChain,\n        address: tokenAddress\n      },\n      onSuccess: price => setTokenPricesUSD({ ...tokenPricesUSD,\n        [fromToken[\"address\"]]: price[\"usdPrice\"]\n      })\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [chain, isInitialized, fromToken]);\n  useEffect(() => {\n    if (!isInitialized || !toToken || !chain) return null;\n    const validatedChain = chain ? getChainIdByName(chain) : chainId;\n    const tokenAddress = IsNative(toToken[\"address\"]) ? getWrappedNative(validatedChain) : toToken[\"address\"];\n    fetchTokenPrice({\n      params: {\n        chain: validatedChain,\n        address: tokenAddress\n      },\n      onSuccess: price => setTokenPricesUSD({ ...tokenPricesUSD,\n        [toToken[\"address\"]]: price[\"usdPrice\"]\n      })\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [chain, isInitialized, toToken]);\n  useEffect(() => {\n    if (!tokenList) return null;\n    setFromToken(tokenList[nativeAddress]);\n  }, [tokenList]);\n  const ButtonState = useMemo(() => {\n    if ((chainIds === null || chainIds === void 0 ? void 0 : chainIds[chainId]) !== chain) return {\n      isActive: false,\n      text: `Switch to ${chain}`\n    };\n    if (!fromAmount) return {\n      isActive: false,\n      text: \"Enter an amount\"\n    };\n    if (fromAmount && currentTrade) return {\n      isActive: true,\n      text: \"Swap\"\n    };\n    return {\n      isActive: false,\n      text: \"Select tokens\"\n    };\n  }, [fromAmount, currentTrade, chainId, chain]);\n  useEffect(() => {\n    if (fromToken && toToken && fromAmount) setCurrentTrade({\n      fromToken,\n      toToken,\n      fromAmount,\n      chain\n    });\n  }, [toToken, fromToken, fromAmount, chain]);\n  useEffect(() => {\n    if (currentTrade) getQuote(currentTrade).then(quote => setQuote(quote)); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentTrade]);\n\n  const PriceSwap = () => {\n    const Quote = quote;\n    if (!Quote || !(tokenPricesUSD === null || tokenPricesUSD === void 0 ? void 0 : tokenPricesUSD[toToken === null || toToken === void 0 ? void 0 : toToken[\"address\"]])) return null;\n    if ((Quote === null || Quote === void 0 ? void 0 : Quote.statusCode) === 400) return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: Quote.message\n    }, void 0, false);\n    console.log(Quote);\n    const {\n      fromTokenAmount,\n      toTokenAmount\n    } = Quote;\n    const {\n      symbol: fromSymbol\n    } = fromToken;\n    const {\n      symbol: toSymbol\n    } = toToken;\n    const pricePerToken = parseFloat(tokenValue(fromTokenAmount, fromToken[\"decimals\"]) / tokenValue(toTokenAmount, toToken[\"decimals\"])).toFixed(6);\n    return /*#__PURE__*/_jsxDEV(Text, {\n      style: styles.priceSwap,\n      children: [\"Price:\", \" \", /*#__PURE__*/_jsxDEV(Text, {\n        children: `1 ${toSymbol} = ${pricePerToken} ${fromSymbol} ($${tokenPricesUSD[[toToken[\"address\"]]].toFixed(6)})`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      style: styles.card,\n      bodyStyle: {\n        padding: \"18px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          borderRadius: \"1rem\"\n        },\n        bodyStyle: {\n          padding: \"0.8rem\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: \"5px\",\n            fontSize: \"14px\",\n            color: \"#434343\"\n          },\n          children: \"From\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexFlow: \"row nowrap\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(InputNumber, {\n              bordered: false,\n              placeholder: \"0.00\",\n              style: { ...styles.input,\n                marginLeft: \"-10px\"\n              },\n              onChange: setFromAmount,\n              value: fromAmount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              style: {\n                fontWeight: \"600\",\n                color: \"#434343\"\n              },\n              children: fromTokenAmountUsd\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              height: \"fit-content\",\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              borderRadius: \"0.6rem\",\n              padding: \"5px 10px\",\n              fontWeight: \"500\",\n              fontSize: \"17px\",\n              gap: \"7px\",\n              border: \"none\"\n            },\n            onClick: () => setFromModalActive(true),\n            children: [fromToken ? /*#__PURE__*/_jsxDEV(Image, {\n              src: (fromToken === null || fromToken === void 0 ? void 0 : fromToken.logoURI) || \"https://etherscan.io/images/main/empty-token.png\",\n              alt: \"nologo\",\n              width: \"30px\",\n              preview: false,\n              style: {\n                borderRadius: \"15px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Select a token\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: fromToken === null || fromToken === void 0 ? void 0 : fromToken.symbol\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Arrow, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          padding: \"10px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(ArrowDownOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          borderRadius: \"1rem\"\n        },\n        bodyStyle: {\n          padding: \"0.8rem\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: \"5px\",\n            fontSize: \"14px\",\n            color: \"#434343\"\n          },\n          children: \"To\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexFlow: \"row nowrap\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              bordered: false,\n              placeholder: \"0.00\",\n              style: styles.input,\n              readOnly: true,\n              value: quote ? Moralis.Units.FromWei(quote === null || quote === void 0 ? void 0 : quote.toTokenAmount, quote === null || quote === void 0 ? void 0 : (_quote$toToken2 = quote.toToken) === null || _quote$toToken2 === void 0 ? void 0 : _quote$toToken2.decimals).toFixed(6) : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              style: {\n                fontWeight: \"600\",\n                color: \"#434343\"\n              },\n              children: toTokenAmountUsd\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              height: \"fit-content\",\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              borderRadius: \"0.6rem\",\n              padding: \"5px 10px\",\n              fontWeight: \"500\",\n              fontSize: \"17px\",\n              gap: \"7px\",\n              border: \"none\"\n            },\n            onClick: () => setToModalActive(true),\n            type: toToken ? \"default\" : \"primary\",\n            children: [toToken ? /*#__PURE__*/_jsxDEV(Image, {\n              src: (toToken === null || toToken === void 0 ? void 0 : toToken.logoURI) || \"https://etherscan.io/images/main/empty-token.png\",\n              alt: \"nologo\",\n              width: \"30px\",\n              preview: false,\n              style: {\n                borderRadius: \"15px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Select a token\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: toToken === null || toToken === void 0 ? void 0 : toToken.symbol\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Arrow, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), quote && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          style: {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            fontSize: \"15px\",\n            color: \"#434343\",\n            marginTop: \"8px\",\n            padding: \"0 10px\"\n          },\n          children: [\"Estimated Gas: \", /*#__PURE__*/_jsxDEV(Text, {\n            children: quote === null || quote === void 0 ? void 0 : quote.estimatedGas\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(PriceSwap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        size: \"large\",\n        style: {\n          width: \"100%\",\n          marginTop: \"15px\",\n          borderRadius: \"0.6rem\",\n          height: \"50px\"\n        },\n        onClick: () => trySwap(currentTrade),\n        disabled: !ButtonState.isActive,\n        children: ButtonState.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Select a token\",\n      visible: isFromModalActive,\n      onCancel: () => setFromModalActive(false),\n      bodyStyle: {\n        padding: 0\n      },\n      width: \"450px\",\n      footer: null,\n      children: /*#__PURE__*/_jsxDEV(InchModal, {\n        open: isFromModalActive,\n        onClose: () => setFromModalActive(false),\n        setToken: setFromToken,\n        tokenList: tokenList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Select a token\",\n      visible: isToModalActive,\n      onCancel: () => setToModalActive(false),\n      bodyStyle: {\n        padding: 0\n      },\n      width: \"450px\",\n      footer: null,\n      children: /*#__PURE__*/_jsxDEV(InchModal, {\n        open: isToModalActive,\n        onClose: () => setToModalActive(false),\n        setToken: setToToken,\n        tokenList: tokenList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(InchDex, \"GQdduJvlKX9+eqgDzuDbQ1FIOdY=\", false, function () {\n  return [useInchDex, useMoralis, useTokenPrice];\n});\n\n_c2 = InchDex;\nexport default InchDex;\n\nconst Arrow = () => /*#__PURE__*/_jsxDEV(\"svg\", {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: \"24\",\n  height: \"24\",\n  viewBox: \"0 0 24 24\",\n  strokeWidth: \"2\",\n  stroke: \"currentColor\",\n  fill: \"none\",\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\",\n  children: [/*#__PURE__*/_jsxDEV(\"path\", {\n    stroke: \"none\",\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 350,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"polyline\", {\n    points: \"6 9 12 15 18 9\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 351,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 339,\n  columnNumber: 3\n}, this);\n\n_c3 = Arrow;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"IsNative\");\n$RefreshReg$(_c2, \"InchDex\");\n$RefreshReg$(_c3, \"Arrow\");","map":{"version":3,"sources":["G:/CryptoRDEX/src/components/InchDex/InchDex.jsx"],"names":["useState","useEffect","useMemo","useMoralis","InchModal","useInchDex","Button","Card","Image","Input","InputNumber","Modal","Text","ArrowDownOutlined","useTokenPrice","tokenValue","getWrappedNative","styles","card","width","boxShadow","border","borderRadius","fontSize","fontWeight","input","padding","display","priceSwap","justifyContent","color","marginTop","nativeAddress","chainIds","getChainIdByName","chainName","chainId","IsNative","address","InchDex","chain","trySwap","tokenList","getQuote","Moralis","isInitialized","isFromModalActive","setFromModalActive","isToModalActive","setToModalActive","fromToken","setFromToken","toToken","setToToken","fromAmount","setFromAmount","quote","setQuote","currentTrade","setCurrentTrade","fetchTokenPrice","tokenPricesUSD","setTokenPricesUSD","fromTokenPriceUsd","toTokenPriceUsd","fromTokenAmountUsd","toFixed","toTokenAmountUsd","Units","FromWei","toTokenAmount","decimals","validatedChain","tokenAddress","params","onSuccess","price","ButtonState","isActive","text","then","PriceSwap","Quote","statusCode","message","console","log","fromTokenAmount","symbol","fromSymbol","toSymbol","pricePerToken","parseFloat","marginBottom","flexFlow","marginLeft","height","alignItems","gap","logoURI","estimatedGas","Arrow"],"mappings":"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","sourcesContent":["import { useState, useEffect, useMemo } from \"react\";\r\nimport { useMoralis } from \"react-moralis\";\r\nimport InchModal from \"./components/InchModal\";\r\nimport useInchDex from \"hooks/useInchDex\";\r\nimport { Button, Card, Image, Input, InputNumber, Modal } from \"antd\";\r\nimport Text from \"antd/lib/typography/Text\";\r\nimport { ArrowDownOutlined } from \"@ant-design/icons\";\r\nimport { useTokenPrice } from \"react-moralis\";\r\nimport { tokenValue } from \"helpers/formatters\";\r\nimport { getWrappedNative } from \"helpers/networks\";\r\n// import { useOneInchQuote } from \"react-moralis\";\r\n\r\nconst styles = {\r\n  card: {\r\n    width: \"430px\",\r\n    boxShadow: \"0 0.5rem 1.2rem rgb(189 197 209 / 20%)\",\r\n    border: \"1px solid #e7eaf3\",\r\n    borderRadius: \"1rem\",\r\n    fontSize: \"16px\",\r\n    fontWeight: \"500\",\r\n  },\r\n  input: {\r\n    padding: \"0\",\r\n    fontWeight: \"500\",\r\n    fontSize: \"23px\",\r\n    display: \"block\",\r\n    width: \"100%\",\r\n  },\r\n  priceSwap: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    fontSize: \"15px\",\r\n    color: \"#434343\",\r\n    marginTop: \"8px\",\r\n    padding: \"0 10px\",\r\n  },\r\n};\r\n\r\nconst nativeAddress = \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";\r\n\r\nconst chainIds = {\r\n  \"0x1\": \"eth\",\r\n  \"0x38\": \"bsc\",\r\n  \"0x89\": \"polygon\",\r\n  \"0x61\": \"bsc testnet\"\r\n};\r\n\r\nconst getChainIdByName = (chainName) => {\r\n  for (let chainId in chainIds) {\r\n    if (chainIds[chainId] === chainName) return chainId;\r\n  }\r\n};\r\n\r\nconst IsNative = (address) => address === \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";\r\n\r\nfunction InchDex({ chain }) {\r\n  const { trySwap, tokenList, getQuote } = useInchDex(chain);\r\n\r\n  const { Moralis, isInitialized, chainId } = useMoralis();\r\n  const [isFromModalActive, setFromModalActive] = useState(false);\r\n  const [isToModalActive, setToModalActive] = useState(false);\r\n  const [fromToken, setFromToken] = useState();\r\n  const [toToken, setToToken] = useState();\r\n  const [fromAmount, setFromAmount] = useState();\r\n  const [quote, setQuote] = useState();\r\n  const [currentTrade, setCurrentTrade] = useState();\r\n  const { fetchTokenPrice } = useTokenPrice();\r\n  const [tokenPricesUSD, setTokenPricesUSD] = useState({});\r\n\r\n  const fromTokenPriceUsd = useMemo(\r\n    () => (tokenPricesUSD?.[fromToken?.[\"address\"]] ? tokenPricesUSD[fromToken?.[\"address\"]] : null),\r\n    [tokenPricesUSD, fromToken]\r\n  );\r\n\r\n  const toTokenPriceUsd = useMemo(\r\n    () => (tokenPricesUSD?.[toToken?.[\"address\"]] ? tokenPricesUSD[toToken?.[\"address\"]] : null),\r\n    [tokenPricesUSD, toToken]\r\n  );\r\n\r\n  const fromTokenAmountUsd = useMemo(() => {\r\n    if (!fromTokenPriceUsd || !fromAmount) return null;\r\n    return `~$ ${(fromAmount * fromTokenPriceUsd).toFixed(4)}`;\r\n  }, [fromTokenPriceUsd, fromAmount]);\r\n\r\n  const toTokenAmountUsd = useMemo(() => {\r\n    if (!toTokenPriceUsd || !quote) return null;\r\n    return `~$ ${(Moralis.Units.FromWei(quote?.toTokenAmount, quote?.toToken?.decimals) * toTokenPriceUsd).toFixed(4)}`;\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [toTokenPriceUsd, quote]);\r\n\r\n  // tokenPrices\r\n  useEffect(() => {\r\n    if (!isInitialized || !fromToken || !chain) return null;\r\n    const validatedChain = chain ? getChainIdByName(chain) : chainId;\r\n    const tokenAddress = IsNative(fromToken[\"address\"]) ? getWrappedNative(validatedChain) : fromToken[\"address\"];\r\n    fetchTokenPrice({\r\n      params: { chain: validatedChain, address: tokenAddress },\r\n      onSuccess: (price) =>\r\n        setTokenPricesUSD({\r\n          ...tokenPricesUSD,\r\n          [fromToken[\"address\"]]: price[\"usdPrice\"],\r\n        }),\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [chain, isInitialized, fromToken]);\r\n\r\n  useEffect(() => {\r\n    if (!isInitialized || !toToken || !chain) return null;\r\n    const validatedChain = chain ? getChainIdByName(chain) : chainId;\r\n    const tokenAddress = IsNative(toToken[\"address\"]) ? getWrappedNative(validatedChain) : toToken[\"address\"];\r\n    fetchTokenPrice({\r\n      params: { chain: validatedChain, address: tokenAddress },\r\n      onSuccess: (price) =>\r\n        setTokenPricesUSD({\r\n          ...tokenPricesUSD,\r\n          [toToken[\"address\"]]: price[\"usdPrice\"],\r\n        }),\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [chain, isInitialized, toToken]);\r\n\r\n  useEffect(() => {\r\n    if (!tokenList) return null;\r\n    setFromToken(tokenList[nativeAddress]);\r\n  }, [tokenList]);\r\n\r\n  const ButtonState = useMemo(() => {\r\n    if (chainIds?.[chainId] !== chain) return { isActive: false, text: `Switch to ${chain}` };\r\n\r\n    if (!fromAmount) return { isActive: false, text: \"Enter an amount\" };\r\n    if (fromAmount && currentTrade) return { isActive: true, text: \"Swap\" };\r\n    return { isActive: false, text: \"Select tokens\" };\r\n  }, [fromAmount, currentTrade, chainId, chain]);\r\n\r\n  useEffect(() => {\r\n    if (fromToken && toToken && fromAmount) setCurrentTrade({ fromToken, toToken, fromAmount, chain });\r\n  }, [toToken, fromToken, fromAmount, chain]);\r\n\r\n  useEffect(() => {\r\n    if (currentTrade) getQuote(currentTrade).then((quote) => setQuote(quote));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentTrade]);\r\n\r\n  const PriceSwap = () => {\r\n    const Quote = quote;\r\n    if (!Quote || !tokenPricesUSD?.[toToken?.[\"address\"]]) return null;\r\n    if (Quote?.statusCode === 400) return <>{Quote.message}</>;\r\n    console.log(Quote);\r\n    const { fromTokenAmount, toTokenAmount } = Quote;\r\n    const { symbol: fromSymbol } = fromToken;\r\n    const { symbol: toSymbol } = toToken;\r\n    const pricePerToken = parseFloat(\r\n      tokenValue(fromTokenAmount, fromToken[\"decimals\"]) / tokenValue(toTokenAmount, toToken[\"decimals\"])\r\n    ).toFixed(6);\r\n    return (\r\n      <Text style={styles.priceSwap}>\r\n        Price:{\" \"}\r\n        <Text>{`1 ${toSymbol} = ${pricePerToken} ${fromSymbol} ($${tokenPricesUSD[[toToken[\"address\"]]].toFixed(\r\n          6\r\n        )})`}</Text>\r\n      </Text>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card style={styles.card} bodyStyle={{ padding: \"18px\" }}>\r\n        <Card style={{ borderRadius: \"1rem\" }} bodyStyle={{ padding: \"0.8rem\" }}>\r\n          <div style={{ marginBottom: \"5px\", fontSize: \"14px\", color: \"#434343\" }}>From</div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexFlow: \"row nowrap\",\r\n            }}\r\n          >\r\n            <div>\r\n              <InputNumber\r\n                bordered={false}\r\n                placeholder=\"0.00\"\r\n                style={{ ...styles.input, marginLeft: \"-10px\" }}\r\n                onChange={setFromAmount}\r\n                value={fromAmount}\r\n              />\r\n              <Text style={{ fontWeight: \"600\", color: \"#434343\" }}>{fromTokenAmountUsd}</Text>\r\n            </div>\r\n            <Button\r\n              style={{\r\n                height: \"fit-content\",\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n                borderRadius: \"0.6rem\",\r\n                padding: \"5px 10px\",\r\n                fontWeight: \"500\",\r\n                fontSize: \"17px\",\r\n                gap: \"7px\",\r\n                border: \"none\",\r\n              }}\r\n              onClick={() => setFromModalActive(true)}\r\n            >\r\n              {fromToken ? (\r\n                <Image\r\n                  src={fromToken?.logoURI || \"https://etherscan.io/images/main/empty-token.png\"}\r\n                  alt=\"nologo\"\r\n                  width=\"30px\"\r\n                  preview={false}\r\n                  style={{ borderRadius: \"15px\" }}\r\n                />\r\n              ) : (\r\n                <span>Select a token</span>\r\n              )}\r\n              <span>{fromToken?.symbol}</span>\r\n              <Arrow />\r\n            </Button>\r\n          </div>\r\n        </Card>\r\n        <div style={{ display: \"flex\", justifyContent: \"center\", padding: \"10px\" }}>\r\n          <ArrowDownOutlined />\r\n        </div>\r\n        <Card style={{ borderRadius: \"1rem\" }} bodyStyle={{ padding: \"0.8rem\" }}>\r\n          <div style={{ marginBottom: \"5px\", fontSize: \"14px\", color: \"#434343\" }}>To</div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexFlow: \"row nowrap\",\r\n            }}\r\n          >\r\n            <div>\r\n              <Input\r\n                bordered={false}\r\n                placeholder=\"0.00\"\r\n                style={styles.input}\r\n                readOnly\r\n                value={quote ? Moralis.Units.FromWei(quote?.toTokenAmount, quote?.toToken?.decimals).toFixed(6) : \"\"}\r\n              />\r\n              <Text style={{ fontWeight: \"600\", color: \"#434343\" }}>{toTokenAmountUsd}</Text>\r\n            </div>\r\n            <Button\r\n              style={{\r\n                height: \"fit-content\",\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n                borderRadius: \"0.6rem\",\r\n                padding: \"5px 10px\",\r\n                fontWeight: \"500\",\r\n                fontSize: \"17px\",\r\n                gap: \"7px\",\r\n                border: \"none\",\r\n              }}\r\n              onClick={() => setToModalActive(true)}\r\n              type={toToken ? \"default\" : \"primary\"}\r\n            >\r\n              {toToken ? (\r\n                <Image\r\n                  src={toToken?.logoURI || \"https://etherscan.io/images/main/empty-token.png\"}\r\n                  alt=\"nologo\"\r\n                  width=\"30px\"\r\n                  preview={false}\r\n                  style={{ borderRadius: \"15px\" }}\r\n                />\r\n              ) : (\r\n                <span>Select a token</span>\r\n              )}\r\n              <span>{toToken?.symbol}</span>\r\n              <Arrow />\r\n            </Button>\r\n          </div>\r\n        </Card>\r\n        {quote && (\r\n          <div>\r\n            <Text\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                fontSize: \"15px\",\r\n                color: \"#434343\",\r\n                marginTop: \"8px\",\r\n                padding: \"0 10px\",\r\n              }}\r\n            >\r\n              Estimated Gas: <Text>{quote?.estimatedGas}</Text>\r\n            </Text>\r\n            <PriceSwap />\r\n          </div>\r\n        )}\r\n        <Button\r\n          type=\"primary\"\r\n          size=\"large\"\r\n          style={{\r\n            width: \"100%\",\r\n            marginTop: \"15px\",\r\n            borderRadius: \"0.6rem\",\r\n            height: \"50px\",\r\n          }}\r\n          onClick={() => trySwap(currentTrade)}\r\n          disabled={!ButtonState.isActive}\r\n        >\r\n          {ButtonState.text}\r\n        </Button>\r\n      </Card>\r\n      <Modal\r\n        title=\"Select a token\"\r\n        visible={isFromModalActive}\r\n        onCancel={() => setFromModalActive(false)}\r\n        bodyStyle={{ padding: 0 }}\r\n        width=\"450px\"\r\n        footer={null}\r\n      >\r\n        <InchModal\r\n          open={isFromModalActive}\r\n          onClose={() => setFromModalActive(false)}\r\n          setToken={setFromToken}\r\n          tokenList={tokenList}\r\n        />\r\n      </Modal>\r\n      <Modal\r\n        title=\"Select a token\"\r\n        visible={isToModalActive}\r\n        onCancel={() => setToModalActive(false)}\r\n        bodyStyle={{ padding: 0 }}\r\n        width=\"450px\"\r\n        footer={null}\r\n      >\r\n        <InchModal\r\n          open={isToModalActive}\r\n          onClose={() => setToModalActive(false)}\r\n          setToken={setToToken}\r\n          tokenList={tokenList}\r\n        />\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default InchDex;\r\n\r\nconst Arrow = () => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    strokeWidth=\"2\"\r\n    stroke=\"currentColor\"\r\n    fill=\"none\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n  >\r\n    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n    <polyline points=\"6 9 12 15 18 9\" />\r\n  </svg>\r\n);\r\n"]},"metadata":{},"sourceType":"module"}