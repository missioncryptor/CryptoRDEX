var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _RESTController = _interopRequireDefault(require("./RESTController"));

var DEEP_INDEX_API_HOST = 'deep-index.moralis.io';
var DEEP_INDEX_SWAGGER_PATH = '/api-docs/v2/swagger.json';

var fetchSwaggerJson = function () {
  var _await$RESTController, response;

  return _regenerator.default.async(function (_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return _regenerator.default.awrap(_RESTController.default.ajax('GET', "https://" + DEEP_INDEX_API_HOST + DEEP_INDEX_SWAGGER_PATH));

        case 2:
          _await$RESTController = _context.sent;
          response = _await$RESTController.response;
          return _context.abrupt("return", response);

        case 5:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, null, Promise);
};

var getPathByTag = function (swaggerJSON) {
  var pathByTag = {};
  var pathDetails = {};
  Object.entries(swaggerJSON.paths).map(function (_ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        pathName = _ref2[0],
        requestData = _ref2[1];

    return Object.entries(requestData).forEach(function (_ref3) {
      var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
          method = _ref4[0],
          data = _ref4[1];

      var tags = data.tags;

      if (tags.length > 0) {
        if (!pathByTag[tags[0]]) {
          pathByTag[tags[0]] = [];
        }

        pathByTag[tags[0]].push(data.operationId);
        pathDetails[data.operationId] = {
          method: method,
          pathName: pathName,
          data: data
        };
      }
    });
  });
  return {
    pathByTag: pathByTag,
    pathDetails: pathDetails
  };
};

var fetchEndpoints = function () {
  var swaggerJSON, _await$getPathByTag, pathDetails, data;

  return _regenerator.default.async(function (_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return _regenerator.default.awrap(fetchSwaggerJson());

        case 2:
          swaggerJSON = _context2.sent;
          _context2.next = 5;
          return _regenerator.default.awrap(getPathByTag(swaggerJSON));

        case 5:
          _await$getPathByTag = _context2.sent;
          pathDetails = _await$getPathByTag.pathDetails;
          data = [];
          Object.keys(pathDetails).forEach(function (x) {
            var item = pathDetails[x];
            var endpoint = {
              method: item.method.toUpperCase(),
              group: item.data.tags[0],
              name: x,
              url: item.pathName.split('{').join(':').split('}').join('')
            };
            data.push(endpoint);
          });
          return _context2.abrupt("return", data);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, null, Promise);
};

var checkForSdkUpdates = function () {
  var _await$RESTController2, response, latestVersion, installedVersion;

  return _regenerator.default.async(function (_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          _context3.next = 3;
          return _regenerator.default.awrap(_RESTController.default.ajax('GET', 'https://registry.npmjs.org/-/v1/search?text=moralis&size=1'));

        case 3:
          _await$RESTController2 = _context3.sent;
          response = _await$RESTController2.response;
          latestVersion = response.objects[0].package.version;
          installedVersion = "0.0.149";
          if (installedVersion < latestVersion) console.warn('You are not using the latest version of the SDK. Please update it as soon as possible to enjoy the newest features.');
          _context3.next = 13;
          break;

        case 10:
          _context3.prev = 10;
          _context3.t0 = _context3["catch"](0);
          console.warn('Could not verify SDK version');

        case 13:
        case "end":
          return _context3.stop();
      }
    }
  }, null, null, [[0, 10]], Promise);
};

module.exports = {
  fetchSwaggerJson: fetchSwaggerJson,
  getPathByTag: getPathByTag,
  fetchEndpoints: fetchEndpoints,
  checkForSdkUpdates: checkForSdkUpdates
};